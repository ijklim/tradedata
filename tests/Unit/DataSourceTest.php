<?php

namespace Tests\Unit;

use Tests\TestCase;

class DataSourceTest extends TestCase
{
    use \Tests\Traits\Test;

    /**
     * Create array with valid and invalid datasets for testing.
     *
     * @return void
     */
    static function createDatasets() {
        // Valid data
        self::$datasets['valid'] = [
            self::constructDataset('exampl.com', 'http://exampl.com/api'),
            self::constructDataset('portal.com', 'http://portalapi.net'),
            self::constructDataset('sample.com', 'https://sample.net'),
        ];

        // Invalid data
        self::$datasets['invalid'] = [
            self::constructDataset('', 'http://aaaa.com/api'),          // missing 1st required field
            self::constructDataset('AAA.com', ''),                      // missing 2nd required field
            self::constructDataset('AAA.com', 'http'),                  // 2nd field too short
            self::constructDataset('exampl.com', 'http://exam.us'),     // uppercase should still violate key check, must be different from $editKeyValue
            self::constructDataset('sample.com', 'http://sam.io'),
        ];


        // Valid data for edit test
        self::$datasets['valid-edit'] = [
            self::constructDataset('portal.com', 'http://portalapi.net/get'),
            self::constructDataset('PORTAL.com', 'http://portalapi.net/get/1'),
            self::constructDataset('ship.us', 'http://ship.net/get'),
            self::constructDataset('PORTaL.com', 'http://delete.this'),         // Change key back to original to support subsequent .destroy testing
        ];

        // Invalid data for edit only, updating the 2nd row
        self::$datasets['invalid-edit'] = [
            // Key violation: using 1st row unique key, check case insensitivity as well
            self::constructDataset(
                self::$className::formatField(self::$uniqueKey, self::$datasets['valid'][0][self::$uniqueKey]),
                'http://portalapi.net/post'
            ),
        ];
    }

    static function setUpBeforeClass()
    {
        // Declared in trait
        self::init(['domain_name', 'api_base_url']);
        self::$primaryKey = 'id';
        self::$uniqueKey = 'domain_name';
        // For convenience the editKeyValue will be used for deletion test as well, deletion must be the last test
        // Note: $editKeyValue should match id generated by the table, normally +1 of index
        self::$editKeyValue = 2;

        self::createDatasets();
    }

    /**
     * Test DataSource related functions.
     *
     * @return void
     */
    public function testDataSource()
    {
        $this->runNewDataTests();
        $this->runUpdateDataTests();
        $this->runDeleteDataTests();
    }
}
